// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chat.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats("type", name)
VALUES($1, $2)
RETURNING id, type, created_at, name
`

type CreateChatParams struct {
	Type string
	Name string
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error) {
	row := q.db.QueryRow(ctx, createChat, arg.Type, arg.Name)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}

const createChatMembers = `-- name: CreateChatMembers :execresult
INSERT INTO chat_members(chat_id, user_id)
VALUES($1, $2)
`

type CreateChatMembersParams struct {
	ChatID int32
	UserID int32
}

func (q *Queries) CreateChatMembers(ctx context.Context, arg CreateChatMembersParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createChatMembers, arg.ChatID, arg.UserID)
}

const findChatByParticipants = `-- name: FindChatByParticipants :one
SELECT chat_id
FROM chat_members
WHERE user_id = ANY($1::int[])
GROUP BY chat_id
HAVING COUNT(*) = $2
   AND COUNT(*) = (
       SELECT COUNT(*) FROM chat_members cm2
       WHERE cm2.chat_id = chat_members.chat_id
   )
`

type FindChatByParticipantsParams struct {
	Column1 []int32
	Column2 interface{}
}

func (q *Queries) FindChatByParticipants(ctx context.Context, arg FindChatByParticipantsParams) (int32, error) {
	row := q.db.QueryRow(ctx, findChatByParticipants, arg.Column1, arg.Column2)
	var chat_id int32
	err := row.Scan(&chat_id)
	return chat_id, err
}

const getChatById = `-- name: GetChatById :one
SELECT id, type, created_at, name FROM chats
WHERE id = $1
`

func (q *Queries) GetChatById(ctx context.Context, id int32) (Chat, error) {
	row := q.db.QueryRow(ctx, getChatById, id)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}

const getChatMessagesByChatId = `-- name: GetChatMessagesByChatId :many
SELECT messages.id, messages.sender_id, messages.content, messages.chat_id, messages.time, messages.type
FROM messages
WHERE messages.chat_id = $1
ORDER BY time ASC
`

func (q *Queries) GetChatMessagesByChatId(ctx context.Context, chatID int32) ([]Message, error) {
	rows, err := q.db.Query(ctx, getChatMessagesByChatId, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.Content,
			&i.ChatID,
			&i.Time,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDmChatMessagesByParticipants = `-- name: GetDmChatMessagesByParticipants :many
SELECT m.id, m.sender_id, m.content, m.chat_id, m.time, m.type
FROM messages m
JOIN chats c ON m.chat_id = c.id
WHERE c.type = 'dm'
  AND m.chat_id IN (
    SELECT chat_id
    FROM chat_members
    WHERE user_id = $1 OR user_id = $2
    GROUP BY chat_id
    HAVING COUNT(DISTINCT user_id) = 2
  )
ORDER BY m.time ASC
`

type GetDmChatMessagesByParticipantsParams struct {
	UserID   int32
	UserID_2 int32
}

func (q *Queries) GetDmChatMessagesByParticipants(ctx context.Context, arg GetDmChatMessagesByParticipantsParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getDmChatMessagesByParticipants, arg.UserID, arg.UserID_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.Content,
			&i.ChatID,
			&i.Time,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const storeChatMessage = `-- name: StoreChatMessage :execresult
INSERT INTO messages(sender_id, content, chat_id, time, type)
VALUES($1, $2, $3, $4, $5)
`

type StoreChatMessageParams struct {
	SenderID int32
	Content  string
	ChatID   int32
	Time     pgtype.Timestamp
	Type     string
}

func (q *Queries) StoreChatMessage(ctx context.Context, arg StoreChatMessageParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, storeChatMessage,
		arg.SenderID,
		arg.Content,
		arg.ChatID,
		arg.Time,
		arg.Type,
	)
}
